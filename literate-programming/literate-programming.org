
#+TITLE: Literate Programming en Javascript
#+AUTHOR: Martín Alsinet
#+DATE: 2018
#+OPTIONS: toc:nil ':t num:nil
#+LANGUAGE: es

#+BEGIN_SRC emacs-lisp :results silent
(blink-cursor-mode 0)
(org-bullets-mode)
(org-indent-mode)
(switch-theme 'leuven)
(setq mode-line-format nil)
(setq cursor-type nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp :results silent
(setq cursor-type t)
(setq mode-line-format 
      '("%e" 
        mode-line-front-space 
        mode-line-mule-info 
        mode-line-client 
        mode-line-modified 
        mode-line-remote mode-line-frame-identification 
        mode-line-buffer-identification "   " 
        mode-line-position 
        (vc-mode vc-mode) "  " 
        mode-line-modes mode-line-misc-info mode-line-end-spaces))
(switch-theme 'zenburn)
(org-indent-mode 0)
(org-bullets-mode 0)
#+END_SRC

* Presentación 





                  Martín Alsinet


               martin@alsinet.com.ar

* Agenda 


  - Definición

  - El problema

  - En qué consiste Literate Programming

  - Ventajas y Desventajas

  - Cuándo conviene aplicarlo

  - Herramientas disponibles

  - Demo

* ¿Qué es Literate Programming? 

#+BEGIN_QUOTE
/I believe that the time is ripe for significantly better documentation of programs, and that we can best achieve this by considering programs to be works of literature. Hence, my title: "Literate Programming."/

/Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do./
#+END_QUOTE

-- Donald Knuth, Literate Programming (1984)

* El Problema 


- Los problemas que tenemos que atacar son cada vez más complejos


- La documentación siempre queda desactualizada respecto del código


- A los programadores no nos gusta documentar. ¿Falta de interactividad?

* ¿En qué consiste Literate Programming?


Consiste en cambiar el enfoque tradicional centrado en el código fuente por un enfoque centrado en la documentación.



            Código Fuente + Comentarios

                        vs

            Comentarios + Código Fuente

* Ventajas y Desventajas

*Ventajas*

- Permite centralizar código y documentación en un solo archivo fácil de navegar

- Permite ejecutar todos y cada uno de los pasos mientras uno lee el documento

*Desventajas*

- Hay que tomarse el tiempo de pensar y de escribir algo coherente

- Ver punto anterior


* ¿Cuándo conviene aplicarlo? 


  Cuando se tienen procedimientos o secuencias de pasos complejas que requieren mucho trabajo para hacerlas funcionar y que luego de logradas se dejan sin modificar durante mucho tiempo (y generalmente se olvidan)


- Configuración, infraestructura, building, devops

- Aprendizaje, tutoriales, capacitación, onboarding

- Reproducible research, exploratory programming, ML, POC

* Herramientas: Emacs y Org-Mode 


- *Emacs*
  Es el editor de los programadores de mediana edad (cof, cof, *viejos*)


- *Org-Mode*
  Es una especie de Markdown mejorado con hooks para ejecutar código


 No tengan miedo, *no es obligatorio usar Emacs*...

* Herramientas: Alternativas a Emacs 


- *Coffeescript*
  - http://coffeescript.org/#literate 
  - [[http://ashkenas.com/docco/][Ejemplo de Literate Coffeescript]]


- *Jupyter Notebooks*
  - https://try.jupyter.org/
  - [[https://github.com/srcolinas/Machine_Learning_basico/blob/master/regresion_lineal.ipynb][Ejemplo de Machine Learning]]


- *Eve*
  - http://play.witheve.com
  - [[http://play.witheve.com/#/examples/flappy.eve][Ejemplo de Flappy Bird]]

* Demo 






                [[file:example-javascript.org][Literate Javascript]]

* ¿Preguntas? 






                  Muchas Gracias!


       https://github.com/martinalsinet/talks
  
