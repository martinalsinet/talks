
#+TITLE: Ejemplo de Literate Programming: Docker Images
#+AUTHOR: Martín Alsinet
#+DATE: 2017
#+OPTIONS: toc:nil ':t num:nil
#+LANGUAGE: es

* Motivación

El objetivo de este documento es detallar las imágenes de Docker personalizadas que utilizo y centralizar los scripts para generarlas en un solo archivo en el que además se pueda documentar qué componentes tiene cada imagen.

Mi editor es [[https://www.gnu.org/software/emacs/][emacs]], y eso me permite generar los dockerfiles directamente desde este documento, gracias a las facilidades de *org-mode*. En caso de no utilizar emacs, se puede consultar el código del dockerfile deseado y luego copiar-y-pegar el código en un archivo para generar la imagen correspondiente.

Una ventaja de tener herramientas dockerizadas (p.ej. como composer o npm) es que es posible ejecutarlas dentro de un contenedor efímero (=--rm=) y de esta manera tener los comandos disponibles sin necesidad instalar nada en el sistema local. Todas las dependencias quedan completamente aisladas dentro de la imagen. Cada vez que se ejecuta el comando se crea un contenedor, se ejecuta el comando dentro del contenedor montando el directorio actual, y cuando termina la ejecución se borra el contenedor. Con este documento también se pueden generar los scripts para utilizar los comandos dockerizados de esta manera, que se guardan en =~/bin=.

* Procedimiento
** Paso 1: Generar carpeta build

Lo primero que debemos hacer es generar la estructura de carpetas en donde se colocarán los distintos dockerfiles. Para hacerlo hay que ejecutar el siguiente bloque de código con =C-c C-c=.

#+BEGIN_SRC sh
rm -Rf ./build
mkdir -p ./build/bin
mkdir -p ./build/php/version-5.6 ./build/php/version-7 ./build/php/composer
mkdir -p ./build/python/version-2.7 ./build/python/version-3.6
mkdir -p ./build/node/version-6.11 ./build/node/version-8.4
mkdir -p ./build/java/version-7-jre ./build/java/version-7-jdk
mkdir -p ./build/java/version-8-jre ./build/java/version-8-jdk
mkdir -p ./build/jupyter
mkdir -p ./build/eve
mkdir -p ./build/mit-scheme
mkdir -p ./build/db/postgres
mkdir -p ./build/db/pgadmin4
mkdir -p ./build/db/mysql
mkdir -p ./build/db/phpmyadmin
mkdir -p ./build/texlive
#+END_SRC

#+RESULTS:

** Paso 2: Generar dockerfiles y comandos

Para generar todos los dockerfiles se debe ejecutar el comando =(M-x org-babel-tangle)=. Este comando busca todos los bloques de código del documento y extrae el código fuente de cada bloque en su archivo Dockerfile correspondiente dentro de la carpeta =./build=. 

Una vez generados los dockerfiles se puede generar la imagen deseada ingresando en la carpeta correspondiente (p.ej., =cd ./build/php/version-5.6=) y ejecutando el comando *docker build* (p.ej., =docker build malsinet/php:5.6-apache .=). Dado que el código fuente de los dockerfiles se encuentra en este documento, la carpeta build se utiliza como almacenamiento temporal para construir las imágenes y está incluida en el =.gitignore= del repositorio. 

Usando el comando *org-babel-tangle* se pueden regenerar los dockerfiles cada vez que sea necesario, manteniendo las fuentes en el documento junto con su documentación.

Además de los dockerfiles, en la carpeta =./build/bin= se generan varios scripts para utilizar las herramientas que proporcionan las imágenes sin instalar nada en la máquina local, ejecutando cada comando directamente desde la imagen.

** Paso 3: Copiar comandos dockerizados a ~/bin

Finalmente copiamos los comandos a la carpeta =~/bin= de modo que queden disponibles para su uso, ejecutando el siguiente bloque de código con =C-c C-c=.

#+BEGIN_SRC sh
chmod +x ./build/bin/*
mkdir -p ~/bin
cp ./build/bin/* ~/bin
#+END_SRC

#+RESULTS:

* Imágenes
** Lenguajes de programación
*** php

Las imágenes de PHP se generan a partir de las imágenes oficiales, a las que les hago las siguientes modificaciones:

- *apache*: =mod_rewrite= activado
- *$PATH*: se agrega =/var/www/vendor/bin= (carpeta con comandos instalados por composer)
- *bash*: se crea un alias para ll y se configura la variable de entorno =$SHELL=
- *extensiones de PHP*:
  + =pdo=
  + =pdo_mysql=
  + =pdo_pgsql=
  + =xdebug=

**** version-5.6

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/php/version-5.6/Dockerfile
FROM php:5.6-apache
MAINTAINER Martin Alsinet <martin@alsinet>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql
RUN pecl install xdebug
RUN echo "zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20131226/xdebug.so" >> /usr/local/etc/php/conf.d/xdebug.ini
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash
ENV PATH=$PATH:/var/www/vendor/bin

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

**** version-7

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/php/version-7/Dockerfile
FROM php:7-apache
MAINTAINER Martin Alsinet <martin@alsinet>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql
RUN pecl install xdebug
RUN echo "zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20151012/xdebug.so" >> /usr/local/etc/php/conf.d/xdebug.ini
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash
ENV PATH=$PATH:/var/www/vendor/bin

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

**** composer

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/php/composer/Dockerfile
FROM composer/composer:alpine
MAINTAINER Martin Alsinet <martin@alsinet>

WORKDIR /app

CMD ["composer"]
#+END_SRC

*** python

Las imágenes de python se crean a partir de las imágenes oficiales, con los siguientes agregados:

- *pip*: upgrade a versión 9 (por defecto viene con la 8.1.2)
- *pew*: el paquete pew es un reemplazo de virtualenvwrapper y se utiliza para generar un entorno virtual en el cual poder ejecutar nuestra aplicación de manera aislada de la instalación de python del sistema. 
- *bpython*: el paquete bpython es una consola para inspeccionar y ejecutar código de manera interactiva con autocomplete y syntax highlighting.
- *bash*: se crea un alias para ll y se configura la variable de entorno =$SHELL=

**** version-2.7

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/python/version-2.7/Dockerfile
FROM python:2.7
MAINTAINER Martin Alsinet <martin@alsinet>

RUN pip install --upgrade pip
RUN pip install pew bpython
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash

WORKDIR /app

CMD ["/bin/bash"]
#+END_SRC

**** version-3.6

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/python/version-3.6/Dockerfile
FROM python:3.6
MAINTAINER Martin Alsinet <martin@alsinet>

RUN pip install --upgrade pip
RUN pip install pew bpython
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash

WORKDIR /app

CMD ["/bin/bash"]
#+END_SRC

*** node
**** version-8.4

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/node/version-8.4/Dockerfile
FROM node:8.4
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
ENV PATH=$PATH:/app/node_modules/.bin
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["npm", "start"]
#+END_SRC

**** version-6.11

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/node/version-6.11/Dockerfile
FROM node:6.11
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
ENV PATH=$PATH:/app/node_modules/.bin
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["npm", "start"]
#+END_SRC

*** java
**** version-7-jre

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/java/version-7-jre/Dockerfile
FROM openjdk:7-jre
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

**** version-7-jdk

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/java/version-7-jdk/Dockerfile
FROM openjdk:7-jdk
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

**** version-8-jre

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/java/version-8-jre/Dockerfile
FROM openjdk:8-jre
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

**** version-8-jdk

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/java/version-8-jdk/Dockerfile
FROM openjdk:8-jdk
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

*** mit-scheme

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/mit-scheme/Dockerfile
FROM debian:8.3

MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update
RUN apt-get install -y mit-scheme

ENTRYPOINT ["mit-scheme"]
#+END_SRC

** Bases de datos
*** postgres
*** pgadmin4
*** mysql
*** phpmyadmin
P** Utilidades
*** texlive

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/texlive/Dockerfile
FROM ubuntu:xenial
MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q
RUN apt-get install -y texlive-full gnuplot python-pygments
RUN apt-get clean
RUN rm -rf /var/lib/apt/lists/*
#+END_SRC

*** Jupyter Notebook

Jupyter Notebook es un entorno para Literate Programming, que permite escribir documentos con Markdown intercalado con bloques de texto que se ejecutan directamente dentro del documento.

El soporte original de lenguajes de programación para Jupyter es Python, pero se pueden agregar motores para que soporte otros lenguajes de programación. En este caso le agrego soporte para ejecutar Javascript mediante nodejs.

Basándonos en la imagen de python3.6 que ya tenemos construida instalamos además [[https://tuananh.org/2015/06/16/how-to-install-zeromq-on-ubuntu/][ZeroMQ]], [[https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions][nodejs]] y [[https://github.com/notablemind/jupyter-nodejs][Jupyter-nodejs]], que nos permite ejecutar código javascript dentro de Jupyter.

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/jupyter/Dockerfile
FROM malsinet/python:3.6
MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q
RUN apt-get install -y libtool pkg-config build-essential autoconf automake
RUN apt-get install -y libzmq-dev curl
RUN curl -sL https://deb.nodesource.com/setup_6.x | bash -
RUN apt-get install -y nodejs
RUN pip3 install jupyter
WORKDIR "/tmp"
RUN git clone https://github.com/notablemind/jupyter-nodejs.git
WORKDIR "/tmp/jupyter-nodejs"
RUN mkdir -p /root/.ipython/kernels/nodejs/
RUN npm install && node install.js
RUN npm run build
RUN npm run build-ext
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--allow-root"]
#+END_SRC

*** Eve

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/eve/Dockerfile
FROM malsinet/node:8.4
MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

WORKDIR "/app"
RUN git clone https://github.com/witheve/Eve.git
WORKDIR "/app/Eve"
RUN git checkout 0.2
RUN npm install --unsafe-perm

CMD ["npm", "start"]
#+END_SRC

* Comandos Dockerizados

Estos comandos permiten utilizar las distintas herramientas sin "contaminar" la máquina local con la instalación de cientos de paquetes, como sucede, por ejemplo, cuando se instala python, php o nodejs con todas sus dependencias. Esto se logra con un script "lanzador" que ejecuta la utilidad dentro de un contenedor efímero (~docker run --rm~), que se borra luego de cada ejecución del comando. Todas las dependencias y paquetes quedan dentro de la imagen correspondiente.

Hay algunos trucos para lograr una integración completa con el entorno, a saber:

- Montar la carpeta =~/.ssh=: Esto se hace para copiar dentro del contenedor la configuración local de ssh (claves públicas y hosts), que sirve por ejemplo cuando el contenedor accede a repositorios privados en github o bitbucket

- Montar la carpeta =/private/var/folders=: En Mac OS X se utiliza la carpeta =/private/var/folders= como destino de los archivos y carpetas temporales

- Montar la carpeta desde donde se lanza el comando como =/app=: Esto permite, por ejemplo, ejecutar =composer install= o =npm install= desde la carpeta de nuestro proyecto

** composer

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/composer
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \ 
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/composer $@
#+END_SRC

** php
*** php-5.6

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/php-5.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/php:5.6-apache php $@
#+END_SRC

*** php-7

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/php-7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/php:7-apache php $@
#+END_SRC

** python

Para python agrego la variable de entorno =PYTHONPATH= que me permite ejecutar cualquier proyecto cargando las dependencias desde la carpeta =./vendor=. De esta manera, uno puede instalar una vez las dependencias con =pip install -t vendor -r requirements.txt= y quedan en la carpeta =./vendor=. Dado que al ejecutar python el comando va a montar la carpeta local como =/app=, si respeto la convención de guardar siempre las dependencias en =./vendor=, siempre serán montadas como =/app/vendor= dentro del contenedor. Por lo tanto, configurando la variable de entorno =PYTHONPATH= con el valor =/app/vendor= me aseguro que python siempre pueda encontrar los módulos que se requieren para ejecutar la aplicación.

*** python-2.7

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/python-2.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "PYTHONPATH=/app/vendor" \
           malsinet/python:2.7 python $@
#+END_SRC

*** pip-2.7

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/pip-2.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "PYTHONPATH=/app/vendor" \
           malsinet/python:2.7 pip $@
#+END_SRC

*** bpython-2.7

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/bpython-2.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -it \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "PYTHONPATH=/app/vendor" \
           malsinet/python:2.7 bpython $@
#+END_SRC

*** python-3.6

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/python-3.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "PYTHONPATH=/app/vendor" \
           malsinet/python:3.6 python $@
#+END_SRC

*** pip-3.6

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/pip-3.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "PYTHONPATH=/app/vendor" \
           malsinet/python:3.6 pip $@
#+END_SRC
*** bpython-3.6

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/bpython-3.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "PYTHONPATH=/app/vendor" \
           malsinet/python:3.6 bpython $@
#+END_SRC

*** pygmentize

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/pygmentize
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
           -v $(pwd):$(pwd) \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.6 pygmentize $@
#+END_SRC

** java
*** java-7-jre

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/java-7-jre
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:7-jre java $@
#+END_SRC

*** java-7-jdk

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/java-7-jdk
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:7-jdk java $@
#+END_SRC

*** java-8-jre

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/java-8-jre
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:8-jre java $@
#+END_SRC

*** java-8-jdk

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/java-8-jdk
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:8-jdk java $@
#+END_SRC

** node
*** npm-node-8.4

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/npm-node-8.4
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 8080:8080 \
           malsinet/node:8.4 \
           npm $@
#+END_SRC

*** node-8.4

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/node-8.4
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 8080:8080 \
           malsinet/node:8.4 \
           node $@
#+END_SRC

*** npm-node-6.11

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/npm-node-6.11
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 8080:8080 \
           malsinet/node:6.11 \
           npm $@
#+END_SRC

*** node-6.11

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/node-6.11
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 8080:8080 \
           malsinet/node:6.11 \
           node $@
#+END_SRC

** mit-scheme

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/mit-scheme
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/mit-scheme
#+END_SRC

** pdflatex

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/pdflatex
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):$(pwd) \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -w $(pwd) \
           malsinet/latex \
           pdflatex $@
rm *.log *.aux 
rm -f *.ent
rm -Rf _minted-*
#+END_SRC

** gnuplot

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/gnuplot
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
       -v $(pwd):$(pwd) \
       -v ~/.ssh:/root/.ssh \
       -w $(pwd) \
       malsinet/latex \
       gnuplot $@
#+END_SRC

** jupyter

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/jupyter
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
       -p 8888:8888 \
       -v $(pwd):/app \
       -w /app \
       malsinet/jupyter \
       jupyter notebook --ip=0.0.0.0 --allow-root
#+END_SRC

** eve

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/eve
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
           -p 8080:8080 \
           malsinet/eve
#+END_SRC
** lein

#+BEGIN_SRC sh :exports code :padline no :tangle build/bin/lein
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -p 8080:8080 \
           clojure lein $@
#+END_SRC
